// --- START_FILE: about/about.component.css ---
(Empty file)
// --- END_FILE: about/about.component.css ---

// --- START_FILE: about/about.component.html ---
<p>about works!</p>
// --- END_FILE: about/about.component.html ---

// --- START_FILE: about/about.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AboutComponent } from './about.component';

describe('AboutComponent', () => {
  let component: AboutComponent;
  let fixture: ComponentFixture<AboutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [AboutComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(AboutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: about/about.component.spec.ts ---

// --- START_FILE: about/about.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-about',
  templateUrl: './about.component.html',
  styleUrl: './about.component.css'
})
export class AboutComponent {

}
// --- END_FILE: about/about.component.ts ---

// --- START_FILE: app.component.css ---
(Empty file)
// --- END_FILE: app.component.css ---

// --- START_FILE: app.component.html ---
<section class="min-h-screen flex flex-col">
    <app-navbar></app-navbar>
    <main class="flex-grow flex flex-col">
        <router-outlet class="bg-amber-400 items-stretch"></router-outlet>
    </main>
    <app-footer></app-footer>
</section>
// --- END_FILE: app.component.html ---

// --- START_FILE: app.component.spec.ts ---
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { RouterTestingModule } from '@angular/router/testing';
import { NavbarComponent } from './components/navbar/navbar.component';
import { FooterComponent } from './components/footer/footer.component';
import { AuthService } from './auth.service'; // Import AuthService
import { UserService } from './user.service'; // Import UserService
import { of } from 'rxjs';

describe('AppComponent', () => {
  beforeEach(async () => {
    // Mock AuthService and UserService
    const authServiceSpy = jasmine.createSpyObj('AuthService', ['isAuthenticated']);
    authServiceSpy.isAuthenticated.and.returnValue(true); // Default to authenticated for tests
    const userServiceSpy = jasmine.createSpyObj('UserService', [], { currentUser$: of(null) }); // Mock currentUser$

    await TestBed.configureTestingModule({
      declarations: [AppComponent, NavbarComponent, FooterComponent], // Declare all components
      imports: [RouterTestingModule],
      providers: [
        { provide: AuthService, useValue: authServiceSpy },
        { provide: UserService, useValue: userServiceSpy }
      ]
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'shop' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('shop');
  });

  // The original test for rendering title expects an h1 directly in app.component.html
  // which is no longer the case with router-outlet. This test is removed.
});
// --- END_FILE: app.component.spec.ts ---

// --- START_FILE: app.component.ts ---
import { Component } from "@angular/core";
import { NavbarComponent } from "./components/navbar/navbar.component";
import { FooterComponent } from "./components/footer/footer.component";
import { RouterOutlet } from "@angular/router";

@Component({
  selector: "app-root",
  templateUrl: "./app.component.html",
  styleUrl: "./app.component.css",
})
export class AppComponent {
  title = "shop";
}
// --- END_FILE: app.component.ts ---

// --- START_FILE: app.config.server.ts ---
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideServerRouting } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRouting(serverRoutes)
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);
// --- END_FILE: app.config.server.ts ---

// --- START_FILE: app.config.ts ---
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app-routing.module'; // Import routes from app-routing.module.ts
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';
import { HttpClientModule, provideHttpClient, withFetch } from '@angular/common/http'; // Import HttpClientModule and provideHttpClient

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes), // Use provideRouter with routes from app-routing.module.ts
    provideClientHydration(withEventReplay()),
    provideHttpClient(withFetch()) // Provide HttpClient
  ]
};
// --- END_FILE: app.config.ts ---

// --- START_FILE: app.routes.server.ts ---
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];
// --- END_FILE: app.routes.server.ts ---

// --- START_FILE: app.routes.ts ---
// This file is no longer directly used for routing configuration
// as routing is now configured in app-routing.module.ts.
// It can be removed or kept as a reference if desired.
// Keeping it empty to reflect the change.
import { Routes } from "@angular/router";
import { HomeComponent } from "./home/home.component";
import { ProfileComponent } from "./profile/profile.component";
import { SettingsComponent } from "./settings/settings.component";
import { AboutComponent } from "./about/about.component";
import { NotFoundComponent } from "./not-found/not-found.component";
import { ProductDetailsComponent } from "./product-details/product-details.component";
import { LoginComponent } from "./login/login.component";

export const routes: Routes = [
  {
    path: "",
    redirectTo: "home",
    pathMatch: "full",
  },
  {
    path: "home",
    component: HomeComponent,
    title: "Home",
  },
  {
    path: "product/:id",
    component: ProductDetailsComponent,
    title: "Product Details",
  },
  {
    path: "profile",
    component: ProfileComponent,
    title: "Profile",
  },
  {
    path: "settings",
    component: SettingsComponent,
    title: "Settings",
  },
  {
    path: "about",
    component: AboutComponent,
    title: "About",
  },
  {
    path: "login", // Add route for the login page
    component: LoginComponent,
    title: "Login",
  },
  {
    path: "**",
    component: NotFoundComponent,
    title: "Not Found",
  },
];
// --- END_FILE: app.routes.ts ---

// --- START_FILE: app/app.module.ts ---
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { NavbarComponent } from './components/navbar/navbar.component';
import { FooterComponent } from './components/footer/footer.component';
import { HomeComponent } from './home/home.component';
import { ProductsComponent } from './components/products/products.component';
import { CategoriesComponent } from './components/categories/categories.component';
import { AboutComponent } from './about/about.component';
import { NotFoundComponent } from './not-found/not-found.component';
import { ProductDetailsComponent } from './product-details/product-details.component';
import { ProfileComponent } from './profile/profile.component';
import { SettingsComponent } from './settings/settings.component';
import { LoginComponent } from './login/login.component'; // Import LoginComponent

@NgModule({
  declarations: [
    AppComponent,
    NavbarComponent,
    FooterComponent,
    HomeComponent,
    ProductsComponent,
    CategoriesComponent,
    AboutComponent,
    NotFoundComponent,
    ProductDetailsComponent,
    ProfileComponent,
    SettingsComponent,
    LoginComponent // Declare the new LoginComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
// --- END_FILE: app/app.module.ts ---

// --- START_FILE: app/app-routing.module.ts ---
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { ProfileComponent } from './profile/profile.component';
import { SettingsComponent } from './settings/settings.component';
import { AboutComponent } from './about/about.component';
import { NotFoundComponent } from './not-found/not-found.component';
import { ProductDetailsComponent } from './product-details/product-details.component';
import { LoginComponent } from './login/login.component'; // Import LoginComponent

export const routes: Routes = [
  {
    path: "",
    redirectTo: "home",
    pathMatch: "full",
  },
  {
    path: "home",
    component: HomeComponent,
    title: "Home",
  },
  {
    path: "product/:id",
    component: ProductDetailsComponent,
    title: "Product Details",
  },
  {
    path: "profile",
    component: ProfileComponent,
    title: "Profile",
  },
  {
    path: "settings",
    component: SettingsComponent,
    title: "Settings",
  },
  {
    path: "about",
    component: AboutComponent,
    title: "About",
  },
  {
    path: "login", // Add route for the login page
    component: LoginComponent,
    title: "Login",
  },
  {
    path: "**",
    component: NotFoundComponent,
    title: "Not Found",
  },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
// --- END_FILE: app/app-routing.module.ts ---

// --- START_FILE: app/auth.service.ts ---
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  // Replace with your GitHub OAuth App Client ID
  private CLIENT_ID = 'YOUR_GITHUB_OAUTH_CLIENT_ID';
  // Replace with your registered Redirect URI (e.g., http://localhost:4200/login)
  // Ensure this matches the "Authorization callback URL" in your GitHub OAuth App settings.
  private REDIRECT_URI = 'http://localhost:4200/login';
  private GITHUB_AUTHORIZE_URL = 'https://github.com/login/oauth/authorize';
  // Using a CORS proxy for client-side demo. In production, this MUST be a backend endpoint.
  private GITHUB_TOKEN_URL = 'https://corsproxy.io/?https://github.com/login/oauth/access_token';

  constructor(private http: HttpClient) { }

  /**
   * Initiates the GitHub OAuth login process by redirecting the user to GitHub.
   */
  loginWithGithub(): void {
    const scope = 'user:email'; // Request email scope
    window.location.href = `${this.GITHUB_AUTHORIZE_URL}?client_id=${this.CLIENT_ID}&redirect_uri=${this.REDIRECT_URI}&scope=${scope}`;
  }

  /**
   * Exchanges the authorization code received from GitHub for an access token.
   * IMPORTANT: This method is for demonstration purposes. In a real application,
   * this token exchange MUST happen on a secure backend server to protect your client_secret.
   * @param code The authorization code from GitHub.
   * @returns An Observable of the access token string or null.
   */
  getAccessToken(code: string): Observable<string | null> {
    const payload = {
      client_id: this.CLIENT_ID,
      // client_secret: 'YOUR_GITHUB_OAUTH_CLIENT_SECRET', // DO NOT EXPOSE THIS ON CLIENT-SIDE!
      code: code,
      redirect_uri: this.REDIRECT_URI,
    };

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Accept': 'application/json' // Request JSON response
    });

    return this.http.post<any>(this.GITHUB_TOKEN_URL, payload, { headers }).pipe(
      tap(response => console.log('GitHub Token Response:', response)),
      map(response => response.access_token || null),
      catchError(error => {
        console.error('Error getting access token:', error);
        return of(null);
      })
    );
  }

  /**
   * Stores the GitHub access token in local storage.
   * @param token The access token to store.
   */
  setAccessToken(token: string): void {
    localStorage.setItem('github_access_token', token);
  }

  /**
   * Retrieves the GitHub access token from local storage.
   * @returns The access token string or null if not found.
   */
  getStoredAccessToken(): string | null {
    return localStorage.getItem('github_access_token');
  }

  /**
   * Checks if the user is currently authenticated by checking for an access token.
   * @returns boolean indicating authentication status.
   */
  isAuthenticated(): boolean {
    return !!this.getStoredAccessToken();
  }

  /**
   * Logs out the user by clearing local storage.
   */
  logout(): void {
    localStorage.removeItem('github_access_token');
    localStorage.removeItem('github_user_data');
    console.log('Logged out successfully.');
  }
}
// --- END_FILE: app/auth.service.ts ---

// --- START_FILE: app/user.service.ts ---
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of, BehaviorSubject } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';

// Define a simple interface for GitHub user data
export interface GitHubUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  email: string | null;
  hireable: boolean | null;
  bio: string | null;
  twitter_username: string | null;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
}

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private GITHUB_USER_API_URL = 'https://api.github.com/user';
  // BehaviorSubject to hold the current user data, null if not logged in
  private currentUserSubject: BehaviorSubject<GitHubUser | null>;
  public currentUser$: Observable<GitHubUser | null>;

  constructor(private http: HttpClient) {
    // Initialize with data from local storage if available
    const storedUser = localStorage.getItem('github_user_data');
    this.currentUserSubject = new BehaviorSubject<GitHubUser | null>(
      storedUser ? JSON.parse(storedUser) : null
    );
    this.currentUser$ = this.currentUserSubject.asObservable();
  }

  /**
   * Fetches user data from the GitHub API using the access token.
   * @param accessToken The GitHub access token.
   * @returns An Observable of the GitHubUser object or null if an error occurs.
   */
  fetchUserData(accessToken: string): Observable<GitHubUser | null> {
    const headers = new HttpHeaders({
      'Authorization': `token ${accessToken}`
    });

    return this.http.get<GitHubUser>(this.GITHUB_USER_API_URL, { headers }).pipe(
      tap(userData => {
        console.log('Fetched user data:', userData);
        this.saveUserData(userData); // Save and update BehaviorSubject
      }),
      catchError(error => {
        console.error('Error fetching user data:', error);
        this.clearUserData(); // Clear data on error
        return of(null);
      })
    );
  }

  /**
   * Saves user data to local storage and updates the BehaviorSubject.
   * @param userData The user data to save.
   */
  saveUserData(userData: GitHubUser): void {
    localStorage.setItem('github_user_data', JSON.stringify(userData));
    this.currentUserSubject.next(userData); // Update the BehaviorSubject
    console.log('User data saved:', userData);
  }

  /**
   * Retrieves user data from local storage. This method is now less critical
   * as `currentUser$` should be used for reactive updates.
   * @returns The GitHubUser object or null if not found.
   */
  getStoredUserData(): GitHubUser | null {
    const userData = localStorage.getItem('github_user_data');
    return userData ? JSON.parse(userData) : null;
  }

  /**
   * Clears user data from local storage and the BehaviorSubject.
   */
  clearUserData(): void {
    localStorage.removeItem('github_user_data');
    this.currentUserSubject.next(null); // Clear the BehaviorSubject
    console.log('User data cleared.');
  }
}
// --- END_FILE: app/user.service.ts ---

// --- START_FILE: components/categories/categories.component.css ---
(Empty file)
// --- END_FILE: components/categories/categories.component.css ---

// --- START_FILE: components/categories/categories.component.html ---
<div class="container mx-auto p-4">
    <h2 class="text-2xl font-bold mb-4">Product Categories</h2>
    <ul class="list-disc pl-5 space-y-2">
        @for (category of categories; track category.id) {
            <li
                class="bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200"
            >
                <h3 class="text-xl font-semibold text-gray-800">
                    {{ category.name }}
                </h3>
                <p class="text-gray-600">{{ category.description }}</p>
                <span class="text-sm text-gray-400">ID: {{ category.id }}</span>
            </li>
        } @empty {
            <li class="text-gray-500 p-4">No categories found.</li>
        }
    </ul>
</div>
// --- END_FILE: components/categories/categories.component.html ---

// --- START_FILE: components/categories/categories.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CategoriesComponent } from './categories.component';

describe('CategoriesComponent', () => {
  let component: CategoriesComponent;
  let fixture: ComponentFixture<CategoriesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [CategoriesComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(CategoriesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: components/categories/categories.component.spec.ts ---

// --- START_FILE: components/categories/categories.component.ts ---
import { Component } from "@angular/core";

interface Category {
  id: number;
  name: string;
  description: string;
}

@Component({
  selector: "app-categories",
  templateUrl: "./categories.component.html",
  styleUrl: "./categories.component.css",
})
export class CategoriesComponent {
  categories: Category[] = [
    { id: 1, name: "Electronics", description: "All electronics products" },
    { id: 2, name: "Clothing", description: "All clothing products" },
    {
      id: 3,
      name: "Home & Kitchen",
      description: "All home and kitchen products",
    },
  ];
}
// --- END_FILE: components/categories/categories.component.ts ---

// --- START_FILE: components/footer/footer.component.css ---
(Empty file)
// --- END_FILE: components/footer/footer.component.css ---

// --- START_FILE: components/footer/footer.component.html ---
<footer
    class="footer sm:footer-horizontal bg-neutral text-neutral-content p-10"
>
    <nav>
        <h6 class="footer-title">Services</h6>
        <a class="link link-hover">Branding</a>
        <a class="link link-hover">Design</a>
        <a class="link link-hover">Marketing</a>
        <a class="link link-hover">Advertisement</a>
    </nav>
    <nav>
        <h6 class="footer-title">Company</h6>
        <a class="link link-hover">About us</a>
        <a class="link link-hover">Contact</a>
        <a class="link link-hover">Jobs</a>
        <a class="link link-hover">Press kit</a>
    </nav>
    <nav>
        <h6 class="footer-title">Legal</h6>
        <a class="link link-hover">Terms of use</a>
        <a class="link link-hover">Privacy policy</a>
        <a class="link link-hover">Cookie policy</a>
    </nav>
</footer>
// --- END_FILE: components/footer/footer.component.html ---

// --- START_FILE: components/footer/footer.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [FooterComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: components/footer/footer.component.spec.ts ---

// --- START_FILE: components/footer/footer.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.css'
})
export class FooterComponent {

}
// --- END_FILE: components/footer/footer.component.ts ---

// --- START_FILE: components/navbar/navbar.component.css ---
(Empty file)
// --- END_FILE: components/navbar/navbar.component.css ---

// --- START_FILE: components/navbar/navbar.component.html ---
<div class="navbar bg-base-100 shadow-sm">
    <div class="flex-1">
        <a routerLink="/home" class="btn btn-ghost text-xl">Shop</a>
    </div>
    <div class="flex gap-2">
        <input
            type="text"
            placeholder="Search"
            class="input input-bordered w-24 md:w-auto"
        />
        <div class="dropdown dropdown-end">
            <div
                tabindex="0"
                role="button"
                class="btn btn-ghost btn-circle avatar"
            >
                <div class="w-10 rounded-full">
                    <img
                        [src]="(user$ | async)?.avatar_url || 'https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp'"
                        alt="User Avatar"
                    />
                </div>
            </div>
            <ul
                tabindex="0"
                class="menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow"
            >
                <ng-container *ngIf="isAuthenticated$ | async; else loggedOutMenu">
                    <li>
                        <a routerLink="/profile" class="justify-between">
                            Profile
                            <span class="badge">New</span>
                        </a>
                    </li>
                    <li><a routerLink="/settings">Settings</a></li>
                    <li><a (click)="handleLogoutClick()">Logout</a></li>
                </ng-container>
                <ng-template #loggedOutMenu>
                    <li><a routerLink="/login">Login</a></li>
                </ng-template>
            </ul>
        </div>
    </div>
</div>
// --- END_FILE: components/navbar/navbar.component.html ---

// --- START_FILE: components/navbar/navbar.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { NavbarComponent } from './navbar.component';
import { RouterTestingModule } from '@angular/router/testing';
import { AuthService } from '../../auth.service';
import { UserService } from '../../user.service';
import { of } from 'rxjs';

describe('NavbarComponent', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;
  let authServiceSpy: jasmine.SpyObj<AuthService>;
  let userServiceSpy: jasmine.SpyObj<UserService>;

  beforeEach(async () => {
    authServiceSpy = jasmine.createSpyObj('AuthService', ['isAuthenticated', 'logout']);
    authServiceSpy.isAuthenticated.and.returnValue(of(false)); // Mock return value as Observable
    userServiceSpy = jasmine.createSpyObj('UserService', ['clearUserData'], { currentUser$: of(null) }); // Mock currentUser$

    await TestBed.configureTestingModule({
      declarations: [NavbarComponent], // Declare the component
      imports: [RouterTestingModule],
      providers: [
        { provide: AuthService, useValue: authServiceSpy },
        { provide: UserService, useValue: userServiceSpy }
      ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: components/navbar/navbar.component.spec.ts ---

// --- START_FILE: components/navbar/navbar.component.ts ---
import { Component, OnInit } from "@angular/core";
import { RouterLink } from "@angular/router";
import { Observable } from "rxjs";
import { AuthService } from "../../../app/auth.service"; // Corrected path
import { UserService, GitHubUser } from "../../../app/user.service"; // Corrected path
import { CommonModule } from '@angular/common'; // Import CommonModule for ngIf, ngFor, etc.

@Component({
  selector: "app-navbar",
  templateUrl: "./navbar.component.html",
  styleUrl: "./navbar.component.css",
})
export class NavbarComponent implements OnInit {
  isAuthenticated$: Observable<boolean>;
  user$: Observable<GitHubUser | null>;

  constructor(private authService: AuthService, private userService: UserService) {
    this.isAuthenticated$ = this.authService.isAuthenticated(); // This will return a boolean, not an Observable
    this.user$ = this.userService.currentUser$;
  }

  ngOnInit(): void {
    // No specific initialization needed here as observables are set in constructor
    // and will react to changes.
  }

  handleLogoutClick(): void {
    this.authService.logout();
    this.userService.clearUserData(); // Clear user data from service
  }
}
// --- END_FILE: components/navbar/navbar.component.ts ---

// --- START_FILE: components/products/products.component.css ---
(Empty file)
// --- END_FILE: components/products/products.component.css ---

// --- START_FILE: components/products/products.component.html ---
<div class="flex flex-wrap justify-center gap-4">
    @for (product of products; track product.id) {
        <div class="card bg-base-100 w-96 shadow-sm mt-4 mb-4">
            <figure>
                <img
                    src="https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp"
                    alt="Shoes"
                />
            </figure>
            <div class="card-body">
                <div class="flex justify-between">
                    <h2 class="card-title">{{ product.name }}</h2>
                    <h2 class="card-title">{{ product.price }}</h2>
                </div>
                <p>
                    {{ product.description }}
                </p>
                <div class="card-actions justify-end">
                    <button class="btn btn-primary">Buy Now</button>
                </div>
            </div>
        </div>
    } @empty {
        <p class="ml-auto mt-4">No Products Found.</p>
    }
</div>
// --- END_FILE: components/products/products.component.html ---

// --- START_FILE: components/products/products.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductsComponent } from './products.component';

describe('ProductsComponent', () => {
  let component: ProductsComponent;
  let fixture: ComponentFixture<ProductsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ProductsComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProductsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: components/products/products.component.spec.ts ---

// --- START_FILE: components/products/products.component.ts ---
import { Component } from "@angular/core";

interface Product {
  id: number;
  name: string;
  price: number;
  image: string;
  description: string;
}

@Component({
  selector: "app-products",
  templateUrl: "./products.component.html",
  styleUrl: "./products.component.css",
})
export class ProductsComponent {
  products: Product[] = [
    {
      id: 1,
      name: "Product 1",
      price: 100,
      image:
        "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      description: "This is product 1",
    },
    {
      id: 2,
      name: "Product 2",
      price: 200,
      image:
        "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      description: "This is product 2",
    },
    {
      id: 3,
      name: "Product 3",
      price: 300,
      image:
        "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      description: "This is product 3",
    },
    {
      id: 4,
      name: "Product 4",
      price: 400,
      image:
        "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      description: "This is product 4",
    },
    {
      id: 5,
      name: "Product 5",
      price: 500,
      image:
        "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      description: "This is product 5",
    },
    {
      id: 6,
      name: "Product 6",
      price: 600,
      image:
        "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      description: "This is product 6",
    },
  ];
}
// --- END_FILE: components/products/products.component.ts ---

// --- START_FILE: home/home.component.css ---
(Empty file)
// --- END_FILE: home/home.component.css ---

// --- START_FILE: home/home.component.html ---
<app-products></app-products>
<app-categories></app-categories>
// --- END_FILE: home/home.component.html ---

// --- START_FILE: home/home.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';
import { ProductsComponent } from '../components/products/products.component';
import { CategoriesComponent } from '../components/categories/categories.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HomeComponent, ProductsComponent, CategoriesComponent] // Declare all components used in template
    })
    .compileComponents();

    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: home/home.component.spec.ts ---

// --- START_FILE: home/home.component.ts ---
import { Component } from "@angular/core";
import { ProductsComponent } from "../components/products/products.component";
import { CategoriesComponent } from "../components/categories/categories.component";

@Component({
  selector: "app-home",
  templateUrl: "./home.component.html",
  styleUrl: "./home.component.css",
})
export class HomeComponent {}
// --- END_FILE: home/home.component.ts ---

// --- START_FILE: login/login.component.css ---
(Empty file)
// --- END_FILE: login/login.component.css ---

// --- START_FILE: login/login.component.html ---
<div class="min-h-screen bg-gray-100 flex items-center justify-center p-4">
  <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-md text-center">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">GitHub OAuth Login</h1>

    <div *ngIf="loading" class="flex items-center justify-center mb-4">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      <p class="ml-3 text-gray-700">Loading...</p>
    </div>

    <div *ngIf="error" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative mb-4" role="alert">
      <strong class="font-bold">Error!</strong>
      <span class="block sm:inline ml-2">{{ error }}</span>
    </div>

    <ng-container *ngIf="user; else loginSection">
      <div>
        <h2 class="text-2xl font-semibold text-gray-700 mb-4">Welcome, {{ user.login }}!</h2>
        <img
          [src]="user.avatar_url || 'https://placehold.co/100x100/aabbcc/ffffff?text=User'"
          alt="User Avatar"
          class="w-24 h-24 rounded-full mx-auto mb-4 border-4 border-blue-500 shadow-md"
          (error)="user.avatar_url = 'https://placehold.co/100x100/aabbcc/ffffff?text=User'"
        />
        <p class="text-gray-600 mb-2">
          <span class="font-medium">Name:</span> {{ user.name || 'N/A' }}
        </p>
        <p class="text-gray-600 mb-2">
          <span class="font-medium">Email:</span> {{ user.email || 'N/A' }}
        </p>
        <p class="text-gray-600 mb-4">
          <span class="font-medium">GitHub Profile:</span>
          <a [href]="user.html_url" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">
            {{ user.html_url }}
          </a>
        </p>
        <button
          (click)="handleLogoutClick()"
          class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"
        >
          Logout
        </button>
      </div>
    </ng-container>

    <ng-template #loginSection>
      <button
        (click)="handleLoginClick()"
        class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
      >
        Login with GitHub
      </button>
    </ng-template>
  </div>
</div>
// --- END_FILE: login/login.component.html ---

// --- START_FILE: login/login.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { LoginComponent } from './login.component';
import { AuthService } from '../auth.service';
import { UserService } from '../user.service';
import { ActivatedRoute, Router } from '@angular/router';
import { of } from 'rxjs';
import { HttpClientTestingModule } from '@angular/common/http/testing';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  let authServiceSpy: jasmine.SpyObj<AuthService>;
  let userServiceSpy: jasmine.SpyObj<UserService>;
  let routerSpy: jasmine.SpyObj<Router>;

  beforeEach(async () => {
    authServiceSpy = jasmine.createSpyObj('AuthService', ['getAccessToken', 'setAccessToken', 'loginWithGithub', 'logout', 'isAuthenticated']);
    userServiceSpy = jasmine.createSpyObj('UserService', ['fetchUserData', 'saveUserData', 'getStoredUserData', 'clearUserData'], { currentUser$: of(null) });
    routerSpy = jasmine.createSpyObj('Router', ['navigate']);

    await TestBed.configureTestingModule({
      declarations: [LoginComponent], // Declare the component
      imports: [HttpClientTestingModule], // Import HttpClientTestingModule for HttpClient
      providers: [
        { provide: AuthService, useValue: authServiceSpy },
        { provide: UserService, useValue: userServiceSpy },
        { provide: ActivatedRoute, useValue: { queryParams: of({}) } }, // Mock ActivatedRoute
        { provide: Router, useValue: routerSpy }
      ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: login/login.component.spec.ts ---

// --- START_FILE: login/login.component.ts ---
import { Component, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from '../auth.service';
import { UserService, GitHubUser } from '../user.service';
import { CommonModule } from '@angular/common'; // Import CommonModule for ngIf, ngFor, etc.
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrl: './login.component.css',
})
export class LoginComponent implements OnInit, OnDestroy {
  user: GitHubUser | null = null;
  loading: boolean = false;
  error: string | null = null;
  private userSubscription: Subscription | undefined;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private authService: AuthService,
    private userService: UserService
  ) { }

  ngOnInit(): void {
    this.loading = true;
    this.error = null;

    // Subscribe to user changes from UserService
    this.userSubscription = this.userService.currentUser$.subscribe(user => {
      this.user = user;
      if (user) {
        this.loading = false; // Stop loading if user data is available
      }
    });

    // Handle GitHub OAuth callback
    this.route.queryParams.subscribe(params => {
      const code = params['code'];

      if (code && !this.user) { // Only process if code exists and user is not already logged in
        console.log('Authorization code received:', code);
        this.authService.getAccessToken(code).subscribe(
          accessToken => {
            if (accessToken) {
              this.authService.setAccessToken(accessToken);
              this.userService.fetchUserData(accessToken).subscribe(
                userData => {
                  // User data is now handled by the BehaviorSubject in UserService
                  // No need to set this.user directly here as it's updated via subscription
                  this.loading = false;
                  // Clear the code from the URL to prevent re-processing on refresh
                  this.router.navigate([], {
                    queryParams: { code: null },
                    queryParamsHandling: 'merge'
                  });
                },
                err => {
                  this.error = 'An error occurred fetching user data.';
                  console.error(err);
                  this.loading = false;
                }
              );
            } else {
              this.error = 'Failed to get access token.';
              this.loading = false;
            }
          },
          err => {
            this.error = 'An error occurred during authentication.';
            console.error(err);
            this.loading = false;
          }
        );
      } else if (!this.user) { // If no code and no stored user, then we are not logged in
        this.loading = false;
      }
    });
  }

  ngOnDestroy(): void {
    if (this.userSubscription) {
      this.userSubscription.unsubscribe();
    }
  }

  /**
   * Handles the login button click, initiating the GitHub OAuth flow.
   */
  handleLoginClick(): void {
    this.authService.loginWithGithub();
  }

  /**
   * Handles the logout button click, clearing user data and state.
   */
  handleLogoutClick(): void {
    this.authService.logout();
    this.userService.clearUserData(); // Clear user data from service
    this.router.navigate(['/login']); // Redirect to login page after logout
  }
}
// --- END_FILE: login/login.component.ts ---

// --- START_FILE: not-found/not-found.component.css ---
(Empty file)
// --- END_FILE: not-found/not-found.component.css ---

// --- START_FILE: not-found/not-found.component.html ---
<p>not-found works!</p>
// --- END_FILE: not-found/not-found.component.html ---

// --- START_FILE: not-found/not-found.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NotFoundComponent } from './not-found.component';

describe('NotFoundComponent', () => {
  let component: NotFoundComponent;
  let fixture: ComponentFixture<NotFoundComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [NotFoundComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(NotFoundComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: not-found/not-found.component.spec.ts ---

// --- START_FILE: not-found/not-found.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-not-found',
  templateUrl: './not-found.component.html',
  styleUrl: './not-found.component.css'
})
export class NotFoundComponent {

}
// --- END_FILE: not-found/not-found.component.ts ---

// --- START_FILE: product-details/product-details.component.css ---
(Empty file)
// --- END_FILE: product-details/product-details.component.css ---

// --- START_FILE: product-details/product-details.component.html ---
<p>product-details works!</p>
// --- END_FILE: product-details/product-details.component.html ---

// --- START_FILE: product-details/product-details.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductDetailsComponent } from './product-details.component';

describe('ProductDetailsComponent', () => {
  let component: ProductDetailsComponent;
  let fixture: ComponentFixture<ProductDetailsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ProductDetailsComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProductDetailsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: product-details/product-details.component.spec.ts ---

// --- START_FILE: product-details/product-details.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-product-details',
  templateUrl: './product-details.component.html',
  styleUrl: './product-details.component.css'
})
export class ProductDetailsComponent {

}
// --- END_FILE: product-details/product-details.component.ts ---

// --- START_FILE: profile/profile.component.css ---
(Empty file)
// --- END_FILE: profile/profile.component.css ---

// --- START_FILE: profile/profile.component.html ---
<div class="container mx-auto p-4 flex flex-col md:flex-row gap-8 h-full">
    <aside class="w-full md:w-1/3">
        <div
            class="card card-compact bg-base-100 shadow-xl p-6 h-full flex flex-col items-center text-center"
        >
            <ng-container *ngIf="user; else loadingProfile">
                <div class="avatar online mb-4">
                    <div
                        class="w-32 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2"
                    >
                        <img
                            [src]="user.avatar_url || 'https://placehold.co/128x128/aabbcc/ffffff?text=User'"
                            alt="Profile Image"
                            (error)="user.avatar_url = 'https://placehold.co/128x128/aabbcc/ffffff?text=User'"
                        />
                    </div>
                </div>
                <h2 class="text-2xl font-bold text-base-content mb-2">{{ user.name || user.login }}</h2>
                <p class="text-gray-500 text-sm">{{ user.email || 'N/A' }}</p>
                <p class="text-gray-600 text-sm mt-2">
                    <a [href]="user.html_url" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">
                        View GitHub Profile
                    </a>
                </p>
            </ng-container>
            <ng-template #loadingProfile>
                <div class="flex flex-col items-center justify-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mb-4"></div>
                    <p class="text-gray-700">Loading profile...</p>
                </div>
            </ng-template>
        </div>
    </aside>

    <section class="w-full md:w-2/3">
        <div
            class="card bg-base-100 shadow-xl p-6 h-full flex flex-col justify-between"
        >
            <div class="flex flex-col gap-4">
                <h3 class="text-xl font-semibold text-base-content">
                    Account Settings
                </h3>
                <p class="text-gray-700">
                    Here you can manage your personal information and
                    preferences.
                </p>
            </div>
            <div class="flex flex-col md:flex-row gap-4 mt-6">
                <button class="btn btn-primary btn-block md:btn-wide">
                    Edit Profile
                </button>
                <button
                    (click)="handleLogoutClick()"
                    class="btn btn-error btn-outline btn-block md:btn-wide"
                >
                    Logout
                </button>
            </div>
        </div>
    </section>
</div>
// --- END_FILE: profile/profile.component.html ---

// --- START_FILE: profile/profile.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ProfileComponent } from './profile.component';
import { UserService } from '../user.service';
import { AuthService } from '../auth.service';
import { RouterTestingModule } from '@angular/router/testing';
import { of, BehaviorSubject } from 'rxjs';
import { GitHubUser } from '../user.service';

describe('ProfileComponent', () => {
  let component: ProfileComponent;
  let fixture: ComponentFixture<ProfileComponent>;
  let userServiceSpy: jasmine.SpyObj<UserService>;
  let authServiceSpy: jasmine.SpyObj<AuthService>;
  let currentUserSubject: BehaviorSubject<GitHubUser | null>;

  const mockUser: GitHubUser = {
    login: 'testuser',
    id: 123,
    node_id: 'node123',
    avatar_url: 'https://example.com/avatar.jpg',
    gravatar_id: '',
    url: 'https://api.github.com/users/testuser',
    html_url: 'https://github.com/testuser',
    followers_url: '',
    following_url: '',
    gists_url: '',
    starred_url: '',
    subscriptions_url: '',
    organizations_url: '',
    repos_url: '',
    events_url: '',
    received_events_url: '',
    type: 'User',
    site_admin: false,
    name: 'Test User',
    company: null,
    blog: null,
    location: null,
    email: 'test@example.com',
    hireable: true,
    bio: null,
    twitter_username: null,
    public_repos: 10,
    public_gists: 5,
    followers: 20,
    following: 15,
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  };

  beforeEach(async () => {
    currentUserSubject = new BehaviorSubject<GitHubUser | null>(mockUser);
    userServiceSpy = jasmine.createSpyObj('UserService', ['clearUserData'], {
      currentUser$: currentUserSubject.asObservable()
    });
    authServiceSpy = jasmine.createSpyObj('AuthService', ['logout', 'isAuthenticated']);
    authServiceSpy.isAuthenticated.and.returnValue(true); // Mock isAuthenticated

    await TestBed.configureTestingModule({
      declarations: [ProfileComponent], // Declare the component
      imports: [RouterTestingModule],
      providers: [
        { provide: UserService, useValue: userServiceSpy },
        { provide: AuthService, useValue: authServiceSpy }
      ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should display user data if available', () => {
    component.user = mockUser;
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h2')?.textContent).toContain('Test User');
    expect(compiled.querySelector('p')?.textContent).toContain('test@example.com');
    expect(compiled.querySelector('img')?.getAttribute('src')).toBe(mockUser.avatar_url);
  });

  it('should call logout and clear user data on logout click', () => {
    component.handleLogoutClick();
    expect(authServiceSpy.logout).toHaveBeenCalled();
    expect(userServiceSpy.clearUserData).toHaveBeenCalled();
  });
});
// --- END_FILE: profile/profile.component.spec.ts ---

// --- START_FILE: profile/profile.component.ts ---
import { Component, OnInit, OnDestroy } from '@angular/core';
import { UserService, GitHubUser } from '../user.service';
import { AuthService } from '../auth.service';
import { Subscription } from 'rxjs';
import { CommonModule } from '@angular/common'; // Import CommonModule for ngIf, ngFor, etc.
import { Router } from '@angular/router';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrl: './profile.component.css',
})
export class ProfileComponent implements OnInit, OnDestroy {
  user: GitHubUser | null = null;
  private userSubscription: Subscription | undefined;

  constructor(
    private userService: UserService,
    private authService: AuthService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.userSubscription = this.userService.currentUser$.subscribe(user => {
      this.user = user;
      // If user logs out from another tab or session expires, redirect to login
      if (!user && this.authService.isAuthenticated()) { // Check if not authenticated but user is null
        this.router.navigate(['/login']);
      }
    });
  }

  ngOnDestroy(): void {
    if (this.userSubscription) {
      this.userSubscription.unsubscribe();
    }
  }

  handleLogoutClick(): void {
    this.authService.logout();
    this.userService.clearUserData();
    this.router.navigate(['/login']); // Redirect to login page after logout
  }
}
// --- END_FILE: profile/profile.component.ts ---

// --- START_FILE: services/user.service.ts ---
// user login with github service

import { Injectable } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { Observable } from "rxjs";

@Injectable({
  providedIn: "root",
})
export class UserService {
  constructor(private http: HttpClient) {}

  // This method is no longer used for GitHub OAuth directly in the frontend.
  // The GitHub OAuth logic has been moved to app/auth.service.ts and app/user.service.ts
  // This file might be a remnant from a previous design.
  // If you intend to use a backend for login, this method would be relevant for calling your backend API.
  loginWithGithub(code: string): Observable<any> {
    // This would typically call your backend endpoint, e.g.:
    // return this.http.post("/api/login/github", { code });
    console.warn('UserService.loginWithGithub is deprecated for direct GitHub OAuth flow. Use AuthService instead.');
    return new Observable(); // Return an empty observable to satisfy type
  }
}
// --- END_FILE: services/user.service.ts ---

// --- START_FILE: settings/settings.component.css ---
(Empty file)
// --- END_FILE: settings/settings.component.css ---

// --- START_FILE: settings/settings.component.html ---
<p>settings works!</p>
// --- END_FILE: settings/settings.component.html ---

// --- START_FILE: settings/settings.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SettingsComponent } from './settings.component';

describe('SettingsComponent', () => {
  let component: SettingsComponent;
  let fixture: ComponentFixture<SettingsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [SettingsComponent] // Changed from imports to declarations
    })
    .compileComponents();

    fixture = TestBed.createComponent(SettingsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// --- END_FILE: settings/settings.component.spec.ts ---

// --- START_FILE: settings/settings.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-settings',
  templateUrl: './settings.component.html',
  styleUrl: './settings.component.css'
})
export class SettingsComponent {

}
// --- END_FILE: settings/settings.component.ts ---
